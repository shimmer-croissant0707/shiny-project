runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
anime1$source
anime1[anime1$source == "radio", ]
unique(anime1$source)
anime1 %>% filter(source == "Radio")
runApp('Desktop/anime')
runApp('Desktop/anime')
names(anime)
names(anime1)
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
dplyr::arrange_()
?dplyr::arrange_
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
boxplot(anime1["scored_by",],plot = FALSE)$out
anime1["scored_by"]
head(anime1["scored_by"])
mean(anime1["scored_by"])
mean(anime1["scored_by"], na.rm = TRUE)
unique(anime1["scored_by"])
min(anime1["scored_by"])
max(anime1["scored_by"])
mean(anime1["scored_by"])
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
anime1 %>% filter(type %in% input$typecheckbox) %>%
ggplot(aes_string(x = "type", y = input$selecttype)) + geom_boxplot()
anime1 %>% filter(type %in% "scored_by") %>%
ggplot(aes_string(x = "type", y = "scored_by")) + geom_boxplot()
names(anime1)
anime1 %>% filter(type == "scored_by")
anime1 %>% filter(type == "OVA")
anime1 %>% filter(type == "OVA") %>%
ggplot(aes_string(x = "type", y = "scored_by")) + geom_boxplot()
anime1 %>% filter(type == "OVA") %>%
mutate(outlier = is_outlier(.data[["scored_by"]])) %>%
filter(outlier == FALSE) %>%
ggplot(aes_string(x = "type", y = "scored_by")) + geom_boxplot()
is_outlier
?is_outlier
is_outlier <- function(x) {
return(x < quantile(x, 0.25) - 1.5 * IQR(x) | x > quantile(x, 0.75) + 1.5 * IQR(x))
}
anime1 %>% filter(type == "OVA") %>%
mutate(outlier = is_outlier(.data[["scored_by"]])) %>%
filter(outlier == FALSE) %>%
ggplot(aes_string(x = "type", y = "scored_by")) + geom_boxplot()
runApp('Desktop/anime')
anime1 %>% filter(type == "OVA") %>%
ggplot(aes_string(x = "type", y = "scored_by")) + geom_boxplot()
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
anime1 %>% group_by(type) %>%
summarise(count = n()) %>%
ggplot(aes(x="", y=count, fill=type)) + geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0)
runApp('Desktop/anime')
anime1 %>% group_by(type) %>%
+     summarise(count = n()) %>%
+     ggplot(aes(x="", y=count, fill=type)) + geom_bar(width = 1, stat = "identity") +
+     coord_polar("y", start=0) + geom_text(aes(label = paste0(round(value*100), "%")), position = position_stack(vjust = 0.5))
anime1 %>% group_by(type) %>%
summarise(count = n()) %>%
ggplot(aes(x="", y=count, fill=type)) + geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) + geom_text(aes(label = paste0(round(value*100), "%")),
position = position_stack(vjust = 0.5))
anime1 %>%
mutate(sum = nrow(anime1)) %>% group_by(type) %>% summarise(count = n()) %>%
ggplot(aes(x="", y=count, fill=type)) + geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) + geom_text(aes(label = paste0(round((count/sum)*100), "%")),
position = position_stack(vjust = 0.5))
nrow(anime1)
anime1 %>%
mutate(sum_ = nrow(anime1)) %>% group_by(type) %>% summarise(count = n()) %>%
ggplot(aes(x="", y=count, fill=type)) + geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) + geom_text(aes(label = paste0(round((count/sum_)*100), "%")),
position = position_stack(vjust = 0.5))
anime1 %>%
mutate(sum_ = nrow(anime1)) %>% group_by(type) %>% summarise(count = n()) %>%
ggplot(aes(x="", y=count, fill=type)) + geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) + geom_text(aes(label = paste0(round((count/sum_)*100), "%")),
position = position_stack(vjust = 0.5))
rows_anime1 <- nrow(anime1)
anime1 %>% group_by(type) %>% summarise(count = n()) %>%
ggplot(aes(x="", y=count, fill=type)) + geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) + geom_text(aes(label = paste0(round((count/rows_anime1)*100), "%")),
position = position_stack(vjust = 0.5))
rows_genre <- nrow(anime_genre)
runApp('Desktop/anime')
runApp('Desktop/anime')
output$typegenre <- renderPlot(
anime_genre %>% group_by(genre) %>% summarise(count = n()) %>% top_n(10, desc(count))
ggplot(aes(x="", y=count, fill=genre)) + geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) + geom_text(aes(label = paste0(round((count/rows_genre)*100), "%")),
position = position_stack(vjust = 0.5))
)
runApp('Desktop/anime')
anime_genre %>% group_by(genre) %>% summarise(count = n()) %>% top_n(10, desc(count)) %>%
ggplot(aes(x="", y=count, fill=genre)) + geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) + geom_text(aes(label = paste0(round((count/rows_genre)*100), "%")),
position = position_stack(vjust = 0.5))
unique(anime_genre$genre)
anime_genre %>% group_by(genre) %>% summarise(count = n()) %>% top_n(10, desc(count))
nrow(anime_genre)
anime_genre %>% group_by(genre) %>% summarise(count = n()) %>% arrange(count)
anime_genre %>% group_by(genre) %>% summarise(count = n()) %>% arrange(desc(count))
anime_genre %>% group_by(genre) %>% summarise(count = n()) %>% arrange(desc(count)) %>% head(10)
anime_genre %>% group_by(genre) %>% summarise(count = n()) %>% arrange(desc(count)) %>%
head(10) %>%
ggplot(aes(x="", y=count, fill=genre)) + geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) + geom_text(aes(label = paste0(round((count/rows_genre)*100), "%")),
position = position_stack(vjust = 0.5))
rows_genre_top_10 <- anime_genre %>% group_by(genre) %>% summarise(count = n()) %>% arrange(desc(count)) %>%
head(10) %>% nrow()
rows_genre_top_10
rows_genre_top_10 <- anime_genre %>% group_by(genre) %>% summarise(count = n()) %>% arrange(desc(count)) %>%
head(10) %>% sum(count)
runApp('Desktop/anime')
#year plot
output$year <- renderPlot(
anime1 %>% filter(year > input$yearslider[1] & year < input$yearslider[2]) %>%
group_by(year) %>% summarise(average_score = mean(score)) %>%
ggplot() + geom_point(aes(x = year, y = average_score))
)
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp()
runApp('Desktop/anime')
?datatable
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
names(anime1)
mydata <- anime1 %>% select("type", "source", "rating", "studio", "genre")
ggpair(mydata)
ggpairs(mydata)
install.packages('hplot')
install.packages("GGally")
library(GGally)
ggpairs(mydata)
mydata <- anime1 %>% select("type", "source", "rating", "genre")
ggpairs(mydata)
mydata <- anime1 %>% select("type", "source", "rating")
ggpairs(mydata)
ggcorr(anime1)
ggcorr(anime1, label = TRUE, label_size = 3, label_round = 2, label_alpha = TRUE)
anime_OP %>% group_by(OP) %>%
summarise(count = n()) %>% arrange(desc(count)) %>%
head(input$OPtext)
anime_OP %>% group_by(OP) %>%
summarise(count = n()) %>% arrange(desc(count)) %>%
head(input$OPtext)
anime_op %>% group_by(OP) %>%
summarise(count = n()) %>% arrange(desc(count)) %>%
head(10)
anime_op %>% group_by(OP) %>%
summarise(count = n()) %>% arrange(desc(count)) %>%
head(input$OPtext) %>% pull(OP)
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
anime_op %>% group_by(OP) %>% summarise(count = n()) %>%
arrange(desc(count)) %>% head(10)
anime_op %>% group_by(OP) %>% summarise(count = n()) %>%
arrange(desc(count)) %>% head(10) %>% pull(OP)
names(anime1)
runApp('Documents/NYCDSA/R_Intro/Class_lecture/6 Shinytopics/shinyTopics/shinyDashBoard')
runApp('Desktop/anime')
paste("a", \m)
runApp('Desktop/anime')
runApp('Desktop/anime')
names(anime1)
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
anime_op %>% group_by(OP) %>% length()
anime_op %>% group_by(OP) %>% nrow()
runApp('Desktop/anime')
anime_op %>% group_by(OP) %>%
summarise(count = n()) %>% arrange(desc(count)) %>%
head(50) %>% pull(OP)
a <- anime_op %>% group_by(OP) %>%
summarise(count = n()) %>% arrange(desc(count)) %>%
head(50) %>% pull(OP)
a
anime_op$iftop = ifelse(anime_op$OP %in% a, "Top Artist", "Not Top Artist")
anime_op %>% ggplot(aes(x = iftop, y = score)) + geom_boxplot()
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
ggcorr(anime1, label = TRUE, label_size = 3, label_round = 2, label_alpha = TRUE)
ggcorr(anime1[corr_choice], label = TRUE, label_size = 3, label_round = 2, label_alpha = TRUE)
ggcorr(anime1[corr_choice], label = TRUE, label_size = 3, label_round = 2, label_alpha = TRUE)
corr_choice = c("episodes", "year", "duration")
ggcorr(anime1[corr_choice], label = TRUE, label_size = 3, label_round = 2, label_alpha = TRUE)
ggcorr(anime1, label = TRUE, label_size = 3, label_round = 2, label_alpha = TRUE)
runApp('Desktop/anime')
corr_choice = c("episodes", "year", "duration", "score", "scored_by", "members", "favorites")
runApp('Desktop/anime')
runApp()
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
anime1[is_outlier(members) == F, ]
anime1[is_outlier(anime1$members) == F, ]
anime1[is_outlier(anime1"members"]) == F, ]
anime1[is_outlier(anime1["members"]) == F, ]
anime1[is_outlier(anime1["members",]) == F, ]
anime1[is_outlier(anime1[,"members"])== F,]
anime1[is_outlier(anime1$members)== F,]
anime1[is_outlier(anime1[,"members"])== F,][,"members"]
runApp('Desktop/anime')
runApp('Desktop/anime')
anime1[is_outlier(anime1[,"members"]) == F & is_outlier(anime1[,"favorites"]) == F,]
runApp('Desktop/anime')
runApp('Desktop/anime')
anime1[is_outlier(anime1[,"members"]) == F &
is_outlier(anime1[,"favorites"]) == F,]
a <- anime1[is_outlier(anime1[,"members"]) == F &
is_outlier(anime1[,"favorites"]) == F,]
colSums(is.na(a))
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
librayry(rsconnect)
library(rsconnect)
rsconnect::setAccountInfo(name='minoringo-croissant777',
token='B62FBB267F6A7DC6E797FBB1CECB4054',
secret='KX9mbD4BoWOZoI7smX/CYwqKtOhBjQ+Q7RBENhEB')
runApp('Desktop/anime')
names(users)
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
names(anime1)
runApp('Desktop/anime')
names(anime1)
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
anime_ranking <- separate_rows(anime_studio, genre, sep = ', ')
runApp('Desktop/anime')
shiny::runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp()
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
anime_studio %>% group_by(studio) %>% summarise(sum(unique(year)))
anime_studio %>% group_by(studio) %>% summarise(nrow(unique(year)))
anime_studio %>% group_by(studio) %>% summarise(length(unique(year)))
anime_studio %>% group_by(studio) %>% summarise(a = length(unique(year))) %>% arrange(a)
anime_studio %>% group_by(studio) %>% summarise(a = length(unique(year))) %>% arrange(desc(a))
anime_studio %>% group_by(studio) %>% summarise(avg_per_year = n()/length(unique(year)))
anime_studio %>% group_by(studio) %>% summarise(avg_per_year = n()/length(unique(year))) %>%
arrange(desc(avg_per_year))
runApp('Desktop/anime')
runApp('Desktop/anime')
anime_studio %>% group_by(studio) %>% summarise(avg_per_year = n()/length(unique(year))) %>%
arrange(desc(avg_per_year))
runApp('Desktop/anime')
displaychoice1 <- c("avg_per_year","average_score", "average_raters", "average_watching", "average_favorites")
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
anime_studio %>% group_by(studio) %>% summarise(avg_per_year = n()/length(unique(year))) %>%
arrange(desc(avg_per_year))
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp()
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
raw.df <- readr::read_csv("./data.csv")
# 1. Convert all the column names to lower cases and rename the columns that have empty space.
names(raw.df) <- tolower(names(raw.df))
raw.df <- rename(raw.df, cuisine = `cuisine description`)
raw.df <- rename(raw.df, inspection.date = `inspection date`)
# 2. Convert the inspection.date column from character to date format.
raw.df <- raw.df %>% mutate(inspection.date = as.Date(inspection.date, "%m/%d/%Y"))
# 3. Extract the month from the inspection.date column.
raw.df <- raw.df %>% mutate(month=as.numeric(format(inspection.date, "%m")))
# 4. Impute the missing values for the 'grade' column
raw.df <- raw.df %>% mutate(grade = ifelse(0 < score & score < 14 , 'A',
ifelse(score < 28, 'B', 'C')))
# 5. Rename the description from the action column to something short so it won't blow up your graph.
raw.df <- mutate(raw.df, action = gsub(pattern = "Violations were cited in the following area(s).", replacement = "violations", x = action, ignore.case = F, fixed = T)) %>%
mutate(action = gsub(pattern = "No violations were recorded at the time of this inspection.", replacement = "no violations", x = action, ignore.case = F)) %>%
mutate(action = gsub(pattern = "Establishment re-opened by DOHMH", replacement = "reopened", x = action, ignore.case = F)) %>%
mutate(action = gsub(pattern = "Establishment Closed by DOHMH.  Violations were cited in the following area(s) and those requiring immediate action were addressed.", replacement = "closed", x = action, ignore.case = F, fixed = T)) %>%
mutate(action = gsub(pattern = "Establishment re-closed by DOHMH", replacement = "reclosed", x = action, ignore.case = F))
# 6. We want to filter out missing values to make our lives easier for further analysis.
raw.df <- filter(raw.df,
boro != 'Missing' & #Eliminate remaining rows with boro == 'Missing'; confirmed that none are in NYC
inspection.date > '1900-01-01' & #Eliminate rows where the restaurant hasn't been inspected yet
!is.na(score) & #Eliminate rows without a score
score >= 0 #Eliminate rows with a negative score
)
# 7. Select the following columns from raw.df: camis, boro, cuisine, inspection.date, action, score, grade, month
raw.df <- select(raw.df, camis, boro, cuisine, inspection.date, action, score, grade, month)
# 8. Unique inspections
inspections = unique(raw.df)
#Bar plot: Restaurants by borough and grade
ggplot(data=inspections) +
geom_bar(aes(x=boro,fill=grade), position='dodge') +
labs(title='Restaurants by borough and latest grade',
x='Borough',
y='Restaurants') +
scale_fill_brewer(palette='Set1') +
theme_bw() +
theme(legend.key=element_blank())
#Bar plot: Restaurants by cuisine and grade
cuisine_flitered <- inspections %>%
group_by(cuisine) %>%
summarise(count=n()) %>%
top_n(20, count)
inspectionsFiltered = semi_join(inspections, cuisine_flitered, by = 'cuisine')
ggplot(data=inspectionsFiltered) +
geom_bar(aes(x=reorder(cuisine, cuisine, function(x) length(x)), fill=grade), position='dodge') +
labs(title='Restaurants by cuisine and grade',
x='Cuisine',
y='Restaurants') +
scale_fill_brewer(palette='Set1') +
coord_flip() +
theme_bw() +
theme(legend.key=element_blank())
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp()
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp()
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
names(animes1)
names(anime1)
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
shiny::runApp('Documents/NYCDSA/R_Intro/Project/anime')
temp = read.table('https://s3.amazonaws.com/graderdata/Temp.txt', header = TRUE)
head(temp)
names(temp)
str(temp)
dim(temp)
head(temp)
describe(temp$Body.Temp)
summary(temp$Body.Temp)
summary(temp$Heart.Rate)
summary(temp$Gender)
# 2.
ggplot(temp) + geom_bar(aes(x = temp$Body.Temp))
ggplot(temp) + geom_bar(aes(x = temp$Heart.Rate))
# 2.
ggplot(temp) + geom_bar(aes(x = Body.Temp))
ggplot(temp) + geom_bar(aes(x = Heart.Rate))
ggplot(temp) + geom_bar(aes(x = Heart.Rate, color = Gender), position = 'dodge')
ggplot(temp) + geom_bar(aes(x = Heart.Rate, fill = Gender), position = 'dodge')
ggplot(temp) + geom_bar(aes(x = Body.Temp, fill = Gender), position = 'dodge')
?t.test
runApp('Documents/NYCDSA/R_Intro/Project/anime')
runApp('Documents/NYCDSA/R_Intro/Project/anime')
anime_op %>% group_by(OP) %>%
summarise(count = n()) %>% arrange(desc(count)) %>%
top_n(10)
runApp('Documents/NYCDSA/R_Intro/Project/anime')
anime_op %>% group_by(OP) %>% summarise(count = n()) %>% arrange(desc(count)) %>% top_n(10)
runApp('Documents/NYCDSA/R_Intro/Project/anime')
runApp('Documents/NYCDSA/R_Intro/Project/anime')
runApp('Documents/NYCDSA/R_Intro/Project/anime')
anime_genre %>% group_by(genre) %>% summarise(count = n()) %>%
arrange(desc(count)) %>% head(10)
anime_genre %>% group_by(genre) %>% summarise(count = n()) %>%
arrange(desc(count)) %>% head(10) %>% sum()
anime_genre %>% group_by(genre) %>% summarise(count = n()) %>%
arrange(desc(count)) %>% head(10) %>% sum(count)
anime_genre %>% group_by(genre) %>% summarise(count = n()) %>%
arrange(desc(count)) %>% head(10) %>% pull(genre)
anime_top_10_genre %>% group_by(genre) %>% summarise(count = n()) %>%
arrange(desc(count)) %>% head(10) %>% pull(genre)
anime_top_10_genre <- anime_genre %>% group_by(genre) %>% summarise(count = n()) %>%
arrange(desc(count)) %>% head(10) %>% pull(genre)
sum(anime_top_10_genre$count)
anime_top_10_genre <- anime_genre %>% group_by(genre) %>% summarise(count = n()) %>%
arrange(desc(count)) %>% head(10)
sum(anime_top_10_genre$count)
runApp('Documents/NYCDSA/R_Intro/Project/anime')
shiny::runApp()
runApp()
runApp()
mange <- anime1 %>% filter(source == "manga")
manga <- anime1 %>% filter(source == "manga")
ln <- anime1 %>% filter(source == "light novel")
t.test(manga, ln)
t.test
t.test?
?
q
?t.test
t.test(manga$score, ln$score)
manga$socre
manga$score
manga
manga <- anime1 %>% filter(source == "Manga")
manga <- anime1 %>% filter(source == "Manga")
manga
ln <- anime1 %>% filter(source == "Light Novel")
t.test(manga$score, ln$score)
manga <- anime1 %>% filter(type == "movie")
nrow(manga)
manga <- anime1 %>% filter(type == "Movie")
nrow(manga)
ln <- anime1 %>% filter(type == "TV")
nrow(ln)
t.test(manga$score, ln$score)
runApp()
t.test(manga$members, ln$members)
manga <- anime1 %>% filter(type == "Movie")
ln <- anime1 %>% filter(type == "TV")
t.test(manga$members, ln$members)
manga <- anime1 %>% filter(type == "Manga")
ln <- anime1 %>% filter(type == "Light Novel")
t.test(manga$members, ln$members)
manga <- anime1 %>% filter(source == "Manga")
ln <- anime1 %>% filter(source == "Light Novel")
t.test(manga$members, ln$members)
runApp()
